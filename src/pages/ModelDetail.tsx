import { useState } from "react";
import { useParams } from "react-router-dom";
import { Box, Flex, Heading, Text, Card, Tabs, Button, TextArea, Code, Avatar } from "@radix-ui/themes";
import { HeartIcon, DownloadIcon, Share1Icon, GitHubLogoIcon, InfoCircledIcon } from "@radix-ui/react-icons";

export function ModelDetail() {
  const { id } = useParams<{ id: string }>();
  const [activeTab, setActiveTab] = useState("overview");
  const [promptText, setPromptText] = useState("");
  const [inferenceResult, setInferenceResult] = useState("");
  const [isInferenceLoading, setIsInferenceLoading] = useState(false);
  
  // Find model in sample data
  const model = allModels.find(m => m.id === id);
  
  if (!model) {
    return (
      <Flex direction="column" align="center" gap="3" py="8">
        <Text>Model not found.</Text>
      </Flex>
    );
  }
  
  // Run inference function
  const runInference = async () => {
    if (!promptText.trim()) return;
    
    setIsInferenceLoading(true);
    
    // In a real implementation, this would communicate with the Sui blockchain for on-chain inference
    // This is just a simulation
    setTimeout(() => {
      let result = "";
      
      if (model.task === "text-generation") {
        result = `${promptText}\n\nThis is a text response generated by the ${model.name} model. In a real implementation, inference would be executed on the Sui blockchain.`;
      } else if (model.task === "translation") {
        result = `Translation result: This is text translated by the ${model.name} model.`;
      } else {
        result = `Inference result from ${model.name} model. Task: ${model.task}`;
      }
      
      setInferenceResult(result);
      setIsInferenceLoading(false);
    }, 1500);
  };
  
  return (
    <Box>
      {/* Model Header */}
      <Flex direction="column" gap="4" mb="6">
        <Flex justify="between" align="start">
          <Box>
            <Heading size="8" style={{ fontWeight: 700 }}>{model.name}</Heading>
            <Flex align="center" gap="2" mt="1">
              <Avatar size="2" fallback={model.creator[0]} style={{ background: "#FF5733" }} />
              <Text size="2">{model.creator}</Text>
            </Flex>
          </Box>
          
          <Flex gap="2">
            <Button variant="soft" style={{ borderRadius: "8px" }}>
              <HeartIcon style={{ color: "#F06292" }} />
              <Text>{model.likes}</Text>
            </Button>
            <Button variant="soft" style={{ borderRadius: "8px" }}>
              <DownloadIcon style={{ color: "#4CAF50" }} />
              <Text>{model.downloads}</Text>
            </Button>
            <Button variant="soft" style={{ borderRadius: "8px" }}>
              <Share1Icon style={{ color: "#2196F3" }} />
            </Button>
          </Flex>
        </Flex>
        
        <Text style={{ fontSize: "16px", lineHeight: "1.6" }}>{model.description}</Text>
        
        <Flex gap="3">
          <Card style={{ borderRadius: "8px", background: "#F5F5F5", border: "none" }}>
            <Flex align="center" gap="2">
              <InfoCircledIcon style={{ color: "#FF5733" }} />
              <Text size="2" style={{ fontWeight: 500 }}>Task: {getTaskName(model.task)}</Text>
            </Flex>
          </Card>
          <Card style={{ borderRadius: "8px", background: "#F5F5F5", border: "none" }}>
            <Flex align="center" gap="2">
              <GitHubLogoIcon style={{ color: "#333333" }} />
              <Text size="2" style={{ fontWeight: 500 }}>License: MIT</Text>
            </Flex>
          </Card>
        </Flex>
      </Flex>
      
      {/* Tab Navigation */}
      <Tabs.Root value={activeTab} onValueChange={setActiveTab} style={{ 
        borderRadius: "12px", 
        overflow: "hidden", 
        boxShadow: "0 4px 6px rgba(0, 0, 0, 0.05)" 
      }}>
        <Tabs.List style={{ 
          background: "var(--gray-2)", 
          padding: "8px", 
          borderBottom: "1px solid var(--gray-4)" 
        }}>
          <Tabs.Trigger value="overview" style={{ fontWeight: 600 }}>Overview</Tabs.Trigger>
          <Tabs.Trigger value="inference" style={{ fontWeight: 600 }}>Inference</Tabs.Trigger>
          <Tabs.Trigger value="files" style={{ fontWeight: 600 }}>Files</Tabs.Trigger>
          <Tabs.Trigger value="community" style={{ fontWeight: 600 }}>Community</Tabs.Trigger>
        </Tabs.List>
        
        <Box py="4" px="3" style={{ background: "white" }}>
          {/* Overview Tab */}
          <Tabs.Content value="overview">
            <Card style={{ border: "none", boxShadow: "none" }}>
              <Flex direction="column" gap="4">
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>Model Information</Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  {model.name} is a {getTaskName(model.task)} model developed by {model.creator}.
                  This model is stored on the Sui blockchain and can run inference in a fully on-chain environment.
                </Text>
                
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>Usage</Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  You can try this model directly in the Inference tab. You can also access it programmatically
                  through Sui smart contracts.
                </Text>
                
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>Model Architecture</Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  {getModelArchitecture(model.task)}
                </Text>
                
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>On-chain Information</Heading>
                <Flex direction="column" gap="2" style={{ background: "#F5F5F5", padding: "16px", borderRadius: "8px" }}>
                  <Text size="2" style={{ fontFamily: "monospace" }}>Object ID: 0x{generateRandomHex(64)}</Text>
                  <Text size="2">Created: {new Date(model.createdAt).toLocaleDateString()}</Text>
                  <Text size="2">Size: {Math.floor(Math.random() * 500) + 100}MB</Text>
                </Flex>
              </Flex>
            </Card>
          </Tabs.Content>
          
          {/* Inference Tab */}
          <Tabs.Content value="inference">
            <Card style={{ border: "none", boxShadow: "none" }}>
              <Flex direction="column" gap="4">
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>On-chain Inference</Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  Provide input below to run inference for the {model.name} model directly on the Sui blockchain.
                </Text>
                
                <Box>
                  <Text size="2" mb="2" style={{ fontWeight: 500 }}>Input:</Text>
                  <TextArea 
                    placeholder={getPlaceholderByTask(model.task)}
                    value={promptText}
                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setPromptText(e.target.value)}
                    style={{ 
                      minHeight: "120px", 
                      borderRadius: "8px", 
                      border: "1px solid var(--gray-5)",
                      padding: "12px",
                      fontSize: "14px"
                    }}
                  />
                </Box>
                
                <Flex justify="end">
                  <Button 
                    onClick={runInference} 
                    disabled={isInferenceLoading || !promptText.trim()}
                    style={{ 
                      background: "#FF5733", 
                      color: "white", 
                      borderRadius: "8px",
                      opacity: isInferenceLoading || !promptText.trim() ? 0.6 : 1
                    }}
                  >
                    {isInferenceLoading ? "Processing..." : "Run Inference"}
                  </Button>
                </Flex>
                
                {inferenceResult && (
                  <Box>
                    <Text size="2" mb="2" style={{ fontWeight: 500 }}>Result:</Text>
                    <Code size="2" style={{ 
                      display: "block", 
                      padding: "16px", 
                      whiteSpace: "pre-wrap",
                      borderRadius: "8px",
                      background: "#F5F5F5",
                      border: "1px solid var(--gray-5)",
                      fontSize: "14px",
                      lineHeight: "1.6"
                    }}>
                      {inferenceResult}
                    </Code>
                  </Box>
                )}
              </Flex>
            </Card>
          </Tabs.Content>
          
          {/* Files Tab */}
          <Tabs.Content value="files">
            <Card style={{ border: "none", boxShadow: "none" }}>
              <Flex direction="column" gap="4">
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>Model Files</Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  This model is stored on the Sui blockchain and consists of the following files.
                </Text>
                
                <Box style={{ background: "#F5F5F5", padding: "16px", borderRadius: "8px" }}>
                  {getModelFiles(model.task).map((file, index) => (
                    <Flex 
                      key={index} 
                      justify="between" 
                      py="2" 
                      style={{ 
                        borderBottom: index < getModelFiles(model.task).length - 1 ? "1px solid var(--gray-a2)" : "none",
                        padding: "12px 8px"
                      }}
                    >
                      <Text size="2" style={{ fontFamily: "monospace" }}>{file.name}</Text>
                      <Text size="2" color="gray">{file.size}</Text>
                    </Flex>
                  ))}
                </Box>
              </Flex>
            </Card>
          </Tabs.Content>
          
          {/* Community Tab */}
          <Tabs.Content value="community">
            <Card style={{ border: "none", boxShadow: "none" }}>
              <Flex direction="column" gap="4" align="center" py="4">
                <Text>Community features coming soon.</Text>
              </Flex>
            </Card>
          </Tabs.Content>
        </Box>
      </Tabs.Root>
    </Box>
  );
}

// Task name conversion function
function getTaskName(taskId: string): string {
  const taskMap: Record<string, string> = {
    "text-generation": "Text Generation",
    "image-classification": "Image Classification",
    "object-detection": "Object Detection",
    "text-to-image": "Text-to-Image",
    "translation": "Translation"
  };
  return taskMap[taskId] || taskId;
}

// Task-specific input placeholders
function getPlaceholderByTask(task: string): string {
  switch (task) {
    case "text-generation":
      return "Enter a text prompt...";
    case "image-classification":
      return "Enter an image URL...";
    case "object-detection":
      return "Enter an image URL...";
    case "text-to-image":
      return "Enter a text prompt for image generation...";
    case "translation":
      return "Enter text to translate...";
    default:
      return "Enter input...";
  }
}

// Model architecture information
function getModelArchitecture(task: string): string {
  switch (task) {
    case "text-generation":
      return "This model is based on the Transformer architecture, using a decoder-only design for autoregressive language modeling.";
    case "image-classification":
      return "This model uses a Convolutional Neural Network (CNN) architecture to classify images.";
    case "object-detection":
      return "This model uses a Single Shot Detector (SSD) architecture to detect and classify objects in images.";
    case "text-to-image":
      return "This model uses a diffusion model architecture to generate images from text prompts.";
    case "translation":
      return "This model uses an encoder-decoder Transformer architecture to translate text from one language to another.";
    default:
      return "This model uses state-of-the-art deep learning architecture.";
  }
}

// Model files list
function getModelFiles(task: string): Array<{name: string, size: string}> {
  const commonFiles = [
    { name: "config.json", size: "4.2KB" },
    { name: "README.md", size: "8.5KB" },
    { name: "LICENSE", size: "1.1KB" },
  ];
  
  switch (task) {
    case "text-generation":
      return [
        { name: "model.bin", size: "548MB" },
        { name: "tokenizer.json", size: "1.2MB" },
        { name: "vocab.json", size: "798KB" },
        ...commonFiles
      ];
    case "image-classification":
      return [
        { name: "model.bin", size: "102MB" },
        { name: "classes.txt", size: "12KB" },
        ...commonFiles
      ];
    default:
      return [
        { name: "model.bin", size: "256MB" },
        ...commonFiles
      ];
  }
}

// Generate random hex string (Sui object ID simulation)
function generateRandomHex(length: number): string {
  const characters = "0123456789abcdef";
  let result = "";
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}

// Sample data
const allModels = [
  {
    id: "1",
    name: "GPT-3 Mini",
    creator: "OpenAI",
    description: "A smaller version of GPT-3 suitable for text generation tasks.",
    downloads: 1200,
    likes: 450,
    task: "text-generation",
    createdAt: "2023-05-15T10:30:00Z"
  },
  {
    id: "2",
    name: "BERT-Base",
    creator: "Google Research",
    description: "Bidirectional Encoder Representations from Transformers for natural language understanding.",
    downloads: 980,
    likes: 320,
    task: "text-generation",
    createdAt: "2023-06-20T14:45:00Z"
  },
  {
    id: "3",
    name: "ResNet-50",
    creator: "Microsoft",
    description: "A 50-layer residual neural network for image classification tasks.",
    downloads: 750,
    likes: 280,
    task: "image-classification",
    createdAt: "2023-04-10T09:15:00Z"
  },
  {
    id: "4",
    name: "YOLO v5",
    creator: "Ultralytics",
    description: "Fast and accurate model for real-time object detection.",
    downloads: 1500,
    likes: 620,
    task: "object-detection",
    createdAt: "2023-07-05T16:20:00Z"
  },
  {
    id: "5",
    name: "Stable Diffusion",
    creator: "Stability AI",
    description: "A model that generates high-quality images from text prompts.",
    downloads: 2200,
    likes: 890,
    task: "text-to-image",
    createdAt: "2023-08-12T11:40:00Z"
  },
  {
    id: "6",
    name: "T5-Base",
    creator: "Google Research",
    description: "Text-to-Text Transfer Transformer for various natural language processing tasks.",
    downloads: 680,
    likes: 240,
    task: "translation",
    createdAt: "2023-03-25T13:10:00Z"
  }
]; 