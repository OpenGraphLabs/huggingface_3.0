import { Box, Flex, Heading, Text, Card, TextArea, Badge, Table, Button, Code } from "@radix-ui/themes";
import { InfoCircledIcon, ReloadIcon, ArrowRightIcon } from "@radix-ui/react-icons";
import { useState } from "react";
import { useModelInferenceState } from "../../hooks/useModelInference";
import { getActivationTypeName, formatVector } from "../../utils/modelUtils";

interface ModelInferenceTabProps {
  model: {
    id: string;
    name: string;
    task_type: string;
    graphs: any[];
  };
}

export function ModelInferenceTab({ model }: ModelInferenceTabProps) {
  const [promptText, setPromptText] = useState("");
  const [inferenceResult, setInferenceResult] = useState("");
  const [isInferenceLoading, setIsInferenceLoading] = useState(false);

  // 레이어 수 가져오기
  const getLayerCount = () => {
    if (!model.graphs || model.graphs.length === 0) return 0;
    return model.graphs[0].layers.length;
  };

  // 추론 관련 훅 사용
  const {
    inputVector,
    currentLayerIndex,
    predictResults,
    inferenceStatus,
    isProcessing,
    txDigest,
    setInputVector,
    startInference,
    predictNextLayer
  } = useModelInferenceState(model.id, getLayerCount());

  // 간단한 텍스트 추론 기능 (현재 시뮬레이션)
  const runInference = async () => {
    if (!promptText.trim()) return;

    setIsInferenceLoading(true);

    // In a real implementation, this would communicate with the Sui blockchain for on-chain inference
    // This is just a simulation
    setTimeout(() => {
      let result = "";

      if (model.task_type === "text-generation") {
        result = `${promptText}\n\nThis is a text response generated by the ${model.name} model. In a real implementation, inference would be executed on the Sui blockchain.`;
      } else if (model.task_type === "translation") {
        result = `Translation result: This is text translated by the ${model.name} model.`;
      } else {
        result = `Inference result from ${model.name} model.`;
      }

      setInferenceResult(result);
      setIsInferenceLoading(false);
    }, 1500);
  };

  return (
    <Card style={{ border: "none", boxShadow: "none" }}>
      <Flex direction="column" gap="4">
        <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>
          On-chain Inference
        </Heading>
        <Text style={{ lineHeight: "1.6" }}>
          이 모델의 추론은 Sui 블록체인 위에서 직접 실행됩니다. 레이어별로 추론 결과를 확인하세요.
        </Text>

        <Card style={{ padding: "16px", borderRadius: "8px", marginBottom: "16px" }}>
          <Flex gap="2" align="center" mb="3">
            <InfoCircledIcon style={{ color: "#2196F3" }} />
            <Text size="2" style={{ fontWeight: 500 }}>
              입력 벡터를 제공하면 모델의 각 레이어를 순차적으로 통과하며 추론 결과를 실시간으로 확인할 수 있습니다.
              각 레이어의 출력이 다음 레이어의 입력으로 자동 연결됩니다.
            </Text>
          </Flex>
        </Card>

        <Box style={{ background: "#F5F5F5", padding: "16px", borderRadius: "8px" }}>
          <Heading size="3" mb="2">
            모델 벡터 입력
          </Heading>
          <Text size="2" mb="2">
            입력 벡터 값을 쉼표로 구분하여 입력하세요:
          </Text>
          <TextArea
            placeholder="예: 1.0, 2.5, -3.0, 4.2, -1.5"
            value={inputVector}
            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInputVector(e.target.value)}
            style={{
              minHeight: "80px",
              borderRadius: "8px",
              border: "1px solid var(--gray-5)",
              padding: "12px",
              fontSize: "14px",
              fontFamily: "monospace",
            }}
          />
        </Box>
        
        <Flex justify="between" align="center" mt="3" mb="3">
          <Flex align="center" gap="2">
            <Text size="2" style={{ fontWeight: 600 }}>
              모델 구조: {getLayerCount()}개 레이어
            </Text>
          </Flex>
          <Flex align="center" gap="2">
            <Text size="2" style={{ fontWeight: 600 }}>
              현재 레이어: {currentLayerIndex}/{getLayerCount()}
            </Text>
          </Flex>
        </Flex>

        <Flex gap="2">
          <Button
            onClick={startInference}
            disabled={isProcessing || !inputVector.trim()}
            style={{
              background: "#FF5733",
              color: "white",
              borderRadius: "8px",
              opacity: isProcessing || !inputVector.trim() ? 0.6 : 1,
            }}
          >
            {isProcessing ? (
              <Flex align="center" gap="2">
                <ReloadIcon style={{ animation: "spin 1s linear infinite" }} />
                <span>처리 중...</span>
              </Flex>
            ) : (
              <span>추론 시작</span>
            )}
          </Button>
          
          <Button
            onClick={predictNextLayer}
            disabled={isProcessing || predictResults.length === 0 || currentLayerIndex >= getLayerCount()}
            style={{
              background: "#2196F3",
              color: "white",
              borderRadius: "8px",
              opacity: isProcessing || predictResults.length === 0 || currentLayerIndex >= getLayerCount() ? 0.6 : 1,
            }}
          >
            {isProcessing ? (
              <Flex align="center" gap="2">
                <ReloadIcon style={{ animation: "spin 1s linear infinite" }} />
                <span>처리 중...</span>
              </Flex>
            ) : (
              <Flex align="center" gap="2">
                <span>수동으로 다음 레이어</span>
                <ArrowRightIcon />
              </Flex>
            )}
          </Button>
        </Flex>

        {inferenceStatus && (
          <Card
            style={{
              padding: "12px 16px",
              borderRadius: "8px",
              background: isProcessing ? "#E3F2FD" : inferenceStatus.includes("오류") ? "#FFEBEE" : "#E8F5E9",
              border: "none",
            }}
          >
            <Text size="2">
              {inferenceStatus}
            </Text>
            {txDigest && (
              <Text size="1" style={{ marginTop: "4px", fontFamily: "monospace" }}>
                트랜잭션: {txDigest.substring(0, 10)}...
              </Text>
            )}
          </Card>
        )}

        {predictResults.length > 0 && (
          <Box style={{ marginTop: "16px" }}>
            <Heading size="3" mb="2">
              레이어별 추론 결과
            </Heading>
            
            <Flex direction="column" gap="3" mb="4">
              <Box>
                <Text size="2" mb="1" style={{ fontWeight: 600 }}>
                  현재 진행 상황: {currentLayerIndex} / {getLayerCount()} 레이어
                </Text>
                <div
                  style={{
                    width: "100%",
                    height: "8px",
                    backgroundColor: "#E0E0E0",
                    borderRadius: "4px",
                    overflow: "hidden",
                  }}
                >
                  <div
                    style={{
                      width: `${(currentLayerIndex / Math.max(1, getLayerCount())) * 100}%`,
                      height: "100%",
                      backgroundColor: "#FF5733",
                      transition: "width 0.3s ease-in-out",
                    }}
                  />
                </div>
              </Box>
              
              <Card style={{ padding: "10px", background: "#F5F5F5" }}>
                <Flex align="center" justify="between">
                  <Text size="2" style={{ fontWeight: 600 }}>
                    총 레이어 수: {getLayerCount()}
                  </Text>
                  <Text size="2" style={{ fontWeight: 600 }}>
                    예측 결과 수: {predictResults.length}
                  </Text>
                </Flex>
              </Card>
            </Flex>
            
            <InferenceResultTable 
              predictResults={predictResults}
              currentLayerIndex={currentLayerIndex}
              isProcessing={isProcessing}
              layerCount={getLayerCount()}
            />
          </Box>
        )}
      </Flex>
    </Card>
  );
}

// 추론 결과 테이블 컴포넌트
interface InferenceResultTableProps {
  predictResults: any[];
  currentLayerIndex: number;
  isProcessing: boolean;
  layerCount: number;
}

function InferenceResultTable({ 
  predictResults, 
  currentLayerIndex, 
  isProcessing, 
  layerCount 
}: InferenceResultTableProps) {
  return (
    <Table.Root>
      <Table.Header>
        <Table.Row>
          <Table.ColumnHeaderCell>레이어</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell>활성화 함수</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell>입력 벡터</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell>출력 벡터</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell>상태</Table.ColumnHeaderCell>
        </Table.Row>
      </Table.Header>
      <Table.Body>
        {predictResults.map((result, index) => (
          <Table.Row key={index}>
            <Table.Cell>
              <Badge color="orange" mr="1">{result.layerIdx + 1}</Badge>
            </Table.Cell>
            <Table.Cell>
              {getActivationTypeName(result.activationType)}
            </Table.Cell>
            <Table.Cell>
              <Box style={{ maxWidth: "200px", overflow: "hidden" }}>
                <Flex direction="column" gap="1">
                  <Text size="1" style={{ color: "var(--gray-9)" }}>
                    크기: {result.inputMagnitude.length}
                  </Text>
                  <Code
                    style={{
                      maxHeight: "60px",
                      overflow: "auto",
                      fontSize: "11px",
                      padding: "4px",
                      backgroundColor: "var(--gray-a2)",
                    }}
                  >
                    [{formatVector(result.inputMagnitude, result.inputSign)}]
                  </Code>
                </Flex>
              </Box>
            </Table.Cell>
            <Table.Cell>
              <Box style={{ maxWidth: "200px", overflow: "hidden" }}>
                <Flex direction="column" gap="1">
                  <Text size="1" style={{ color: "var(--gray-9)" }}>
                    크기: {result.outputMagnitude.length}
                  </Text>
                  <Code
                    style={{
                      maxHeight: "60px",
                      overflow: "auto",
                      fontSize: "11px",
                      padding: "4px",
                      backgroundColor: "var(--gray-a2)",
                    }}
                  >
                    [{formatVector(result.outputMagnitude, result.outputSign)}]
                  </Code>
                </Flex>
              </Box>
            </Table.Cell>
            <Table.Cell>
              {result.argmaxIdx !== undefined ? (
                <Badge color="green">
                  최종 예측 값: {formatVector([result.outputMagnitude[result.argmaxIdx]], [result.outputSign[result.argmaxIdx]])}
                </Badge>
              ) : (
                <Badge color="blue">완료</Badge>
              )}
            </Table.Cell>
          </Table.Row>
        ))}
        
        {/* 현재 처리 중인 레이어 행 */}
        {isProcessing && (
          <Table.Row>
            <Table.Cell>
              <Badge color="orange" mr="1">{currentLayerIndex + 1}</Badge>
            </Table.Cell>
            <Table.Cell>진행 중...</Table.Cell>
            <Table.Cell>
              <Flex align="center" gap="2">
                <ReloadIcon style={{ animation: "spin 1s linear infinite" }} />
                <Text size="2">처리 중...</Text>
              </Flex>
            </Table.Cell>
            <Table.Cell>
              <Flex align="center" gap="2">
                <ReloadIcon style={{ animation: "spin 1s linear infinite" }} />
                <Text size="2">처리 중...</Text>
              </Flex>
            </Table.Cell>
            <Table.Cell>
              <Badge color="orange">처리 중</Badge>
            </Table.Cell>
          </Table.Row>
        )}
        
        {/* 남은 레이어 행 */}
        {Array.from({ length: Math.max(0, layerCount - currentLayerIndex - (isProcessing ? 1 : 0)) }).map((_, idx) => (
          <Table.Row key={`pending-${idx}`} style={{ opacity: 0.5 }}>
            <Table.Cell>
              <Badge variant="outline" mr="1">{currentLayerIndex + idx + (isProcessing ? 1 : 0) + 1}</Badge>
            </Table.Cell>
            <Table.Cell>대기 중</Table.Cell>
            <Table.Cell>-</Table.Cell>
            <Table.Cell>-</Table.Cell>
            <Table.Cell>
              <Badge variant="outline" color="gray">대기 중</Badge>
            </Table.Cell>
          </Table.Row>
        ))}
      </Table.Body>
    </Table.Root>
  );
} 