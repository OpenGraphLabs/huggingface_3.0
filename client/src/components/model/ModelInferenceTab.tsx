import { Box, Flex, Heading, Text, Card, TextArea, Badge, Table, Button, Code, Tooltip } from "@radix-ui/themes";
import { InfoCircledIcon, ReloadIcon, ExternalLinkIcon, CheckIcon, CrossCircledIcon, ExclamationTriangleIcon } from "@radix-ui/react-icons";
import { useState } from "react";
import { motion } from "framer-motion";
import { useModelInferenceState } from "../../hooks/useModelInference";
import { getActivationTypeName, formatVector } from "../../utils/modelUtils";
import { 
  Rocket, 
  CircleWavyCheck as CircuitBoard, 
  Brain as BrainCircuit,
  ArrowRight,
  Lightning,
  WarningCircle
} from "phosphor-react";
import { ModelObject } from "../../services/modelGraphQLService";
import { getSuiScanUrl } from "../../utils/sui";

interface ModelInferenceTabProps {
  model: ModelObject;
}

export function ModelInferenceTab({ model }: ModelInferenceTabProps) {
  const [promptText, setPromptText] = useState("");
  const [inferenceResult, setInferenceResult] = useState("");
  const [isInferenceLoading, setIsInferenceLoading] = useState(false);

  // Get layer count
  const getLayerCount = () => {
    if (!model.graphs || model.graphs.length === 0) return 0;
    return model.graphs[0].layers.length;
  };

  // Use inference hook
  const {
    inputVector,
    currentLayerIndex,
    predictResults,
    inferenceStatus,
    inferenceStatusType,
    isProcessing,
    txDigest,
    setInputVector,
    startInference,
    predictNextLayer
  } = useModelInferenceState(model.id, getLayerCount());

  // Simple text inference (simulation only)
  const runInference = async () => {
    if (!promptText.trim()) return;

    setIsInferenceLoading(true);

    // In the actual implementation, this would communicate with the Sui blockchain
    // This is just a simulation
    setTimeout(() => {
      let result = "";

      if (model.task_type === "text-generation") {
        result = `${promptText}\n\nThis text was generated by the ${model.name} model. In the actual implementation, inference would run on the Sui blockchain.`;
      } else if (model.task_type === "translation") {
        result = `Translation result: Text translated by the ${model.name} model.`;
      } else {
        result = `Inference result from the ${model.name} model.`;
      }

      setInferenceResult(result);
      setIsInferenceLoading(false);
    }, 1500);
  };

  return (
    <Card style={{ border: "none", boxShadow: "none" }}>
      <Flex direction="column" gap="5">
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Flex align="center" gap="3" mb="4">
            <Box style={{ 
              background: "#FFF4F2", 
              borderRadius: "8px", 
              width: "32px", 
              height: "32px", 
              display: "flex", 
              alignItems: "center", 
              justifyContent: "center", 
              color: "#FF5733" 
            }}>
              <Rocket size={20} weight="bold" />
            </Box>
            <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>
              On-Chain Inference
            </Heading>
          </Flex>
        </motion.div>
        
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <Flex justify="between" align="center" mb="4">
            <Text style={{ lineHeight: "1.7", fontSize: "15px", color: "#444", letterSpacing: "0.01em" }}>
              Inference for this model runs directly on the Sui blockchain. Observe the results layer by layer.
            </Text>
            <Button
              variant="soft"
              style={{ 
                background: "#FFF4F2", 
                color: "#FF5733",
                cursor: "pointer",
                transition: "all 0.2s ease-in-out",
                border: "1px solid #FFE8E2",
              }}
              className="hover-effect"
              onClick={() => window.open(getSuiScanUrl('object', model.id), '_blank')}
            >
              <Flex align="center" gap="2">
                <Text size="2">View Model on Sui Explorer</Text>
                <ExternalLinkIcon />
              </Flex>
            </Button>
          </Flex>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card style={{ 
            padding: "24px", 
            borderRadius: "12px", 
            marginBottom: "24px", 
            background: "#FFFFFF", 
            border: "1px solid #FFE8E2",
            boxShadow: "0 4px 12px rgba(255, 87, 51, 0.05)" 
          }}>
            <Flex gap="3" align="center" mb="4">
              <Box style={{ 
                color: "#FF5733", 
                background: "#FFF4F2", 
                borderRadius: "50%", 
                width: "32px", 
                height: "32px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center"
              }}>
                <InfoCircledIcon style={{ width: "16px", height: "16px" }} />
              </Box>
              <Text size="2" style={{ fontWeight: 500, lineHeight: "1.6" }}>
                Provide an input vector to observe how the model processes each layer sequentially.
                Each layer's output is automatically passed as input to the next layer.
              </Text>
            </Flex>
            
            <Flex direction="column" gap="3">
              <Flex align="center" gap="3">
                <BrainCircuit size={20} weight="duotone" style={{ color: "#FF5733" }} />
                <Heading size="3">Input Vector</Heading>
              </Flex>
              
              <TextArea
                placeholder="Example: 1.0, 2.5, -3.0, 4.2, -1.5"
                value={inputVector}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInputVector(e.target.value)}
                style={{
                  minHeight: "80px",
                  borderRadius: "8px",
                  border: "1px solid #FFE8E2",
                  padding: "12px",
                  fontSize: "14px",
                  fontFamily: "monospace",
                  background: "#FDFDFD",
                }}
              />
              
              <Flex justify="between" align="center" mt="3">
                <Flex align="center" gap="3">
                  <Badge variant="soft" style={{ background: "#FFF4F2", color: "#FF5733" }}>
                    <CircuitBoard size={14} weight="bold" />
                    <Text size="1">Model Structure: {getLayerCount()} Layers</Text>
                  </Badge>
                </Flex>
                <Badge variant="soft" style={{ background: "#FFF4F2", color: "#FF5733" }}>
                  <Text size="1">Current Layer: {currentLayerIndex}/{getLayerCount()}</Text>
                </Badge>
              </Flex>
              
              <Flex gap="3" mt="4">
                <Button
                  onClick={startInference}
                  disabled={isProcessing || !inputVector.trim()}
                  style={{
                    background: "#FF5733",
                    color: "white",
                    borderRadius: "8px",
                    opacity: isProcessing || !inputVector.trim() ? 0.6 : 1,
                    transition: "all 0.2s ease",
                  }}
                >
                  {isProcessing ? (
                    <Flex align="center" gap="2">
                      <ReloadIcon style={{ animation: "spin 1s linear infinite" }} />
                      <span>Processing...</span>
                    </Flex>
                  ) : (
                    <Flex align="center" gap="2">
                      <Lightning size={16} weight="bold" />
                      <span>Start Inference</span>
                    </Flex>
                  )}
                </Button>
                
                <Button
                  onClick={predictNextLayer}
                  disabled={isProcessing || predictResults.length === 0 || currentLayerIndex >= getLayerCount()}
                  style={{
                    background: "#FF7A00",
                    color: "white",
                    borderRadius: "8px",
                    opacity: isProcessing || predictResults.length === 0 || currentLayerIndex >= getLayerCount() ? 0.6 : 1,
                    transition: "all 0.2s ease",
                  }}
                >
                  {isProcessing ? (
                    <Flex align="center" gap="2">
                      <ReloadIcon style={{ animation: "spin 1s linear infinite" }} />
                      <span>Processing...</span>
                    </Flex>
                  ) : (
                    <Flex align="center" gap="2">
                      <span>Run Next Layer Manually</span>
                      <ArrowRight size={16} weight="bold" />
                    </Flex>
                  )}
                </Button>
              </Flex>
            </Flex>
          </Card>
        </motion.div>

        {inferenceStatus && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <Card
              style={{
                padding: "16px",
                borderRadius: "12px",
                background: inferenceStatusType === 'info' 
                  ? "#E3F2FD" 
                  : inferenceStatusType === 'error' 
                  ? "#FFEBEE" 
                  : inferenceStatusType === 'warning'
                  ? "#FFF3E0"
                  : "#E8F5E9",
                border: inferenceStatusType === 'error' ? "1px solid #FFCDD2" : "none",
                marginBottom: "20px",
                boxShadow: "0 4px 8px rgba(0, 0, 0, 0.05)",
              }}
            >
              <Flex justify="between" align="center">
                <Flex align="center" gap="2">
                  {inferenceStatusType === 'info' && (
                    <InfoCircledIcon style={{ color: "#2196F3", width: "18px", height: "18px" }} />
                  )}
                  {inferenceStatusType === 'error' && (
                    <CrossCircledIcon style={{ color: "#F44336", width: "18px", height: "18px" }} />
                  )}
                  {inferenceStatusType === 'warning' && (
                    <ExclamationTriangleIcon style={{ color: "#FF9800", width: "18px", height: "18px" }} />
                  )}
                  {inferenceStatusType === 'success' && (
                    <CheckIcon style={{ color: "#4CAF50", width: "18px", height: "18px" }} />
                  )}
                  <Text size="2" style={{ 
                    fontWeight: 500,
                    color: inferenceStatusType === 'info' 
                      ? "#0D47A1" 
                      : inferenceStatusType === 'error' 
                      ? "#B71C1C" 
                      : inferenceStatusType === 'warning'
                      ? "#E65100"
                      : "#1B5E20"
                  }}>
                    {inferenceStatus}
                  </Text>
                </Flex>
                {txDigest && (
                  <Button
                    variant="soft"
                    size="1"
                    style={{ 
                      background: "#FFF4F2", 
                      color: "#FF5733",
                      cursor: "pointer",
                      transition: "all 0.2s ease-in-out",
                      border: "1px solid #FFE8E2",
                    }}
                    className="hover-effect"
                    onClick={() => window.open(getSuiScanUrl('transaction', txDigest), '_blank')}
                  >
                    <Flex align="center" gap="2">
                      <Text size="1">View on Sui Explorer</Text>
                      <ExternalLinkIcon />
                    </Flex>
                  </Button>
                )}
              </Flex>
              {txDigest && (
                <Tooltip content="Click to view this transaction on Sui Explorer">
                  <Text 
                    size="1" 
                    style={{ 
                      marginTop: "6px", 
                      fontFamily: "monospace", 
                      cursor: "pointer" 
                    }}
                    onClick={() => window.open(getSuiScanUrl('transaction', txDigest), '_blank')}
                  >
                    Transaction: {txDigest.substring(0, 10)}...{txDigest.substring(txDigest.length - 10)}
                  </Text>
                </Tooltip>
              )}
            </Card>
          </motion.div>
        )}

        {predictResults.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            <Box style={{ marginTop: "16px" }}>
              <Flex align="center" gap="3" mb="4">
                <Box style={{ 
                  background: "#FFF4F2", 
                  borderRadius: "8px", 
                  width: "28px", 
                  height: "28px", 
                  display: "flex", 
                  alignItems: "center", 
                  justifyContent: "center", 
                  color: "#FF5733" 
                }}>
                  <CircuitBoard size={16} weight="bold" />
                </Box>
                <Heading size="3" style={{ color: "#333" }}>
                  Layer-by-Layer Inference Results
                </Heading>
              </Flex>
              
              <Card style={{ 
                padding: "24px", 
                borderRadius: "12px", 
                background: "#FFFFFF", 
                border: "1px solid #FFE8E2",
                boxShadow: "0 4px 12px rgba(255, 87, 51, 0.05)" 
              }}>
                <Flex direction="column" gap="4" mb="5">
                  <Box>
                    <Text size="2" mb="2" style={{ fontWeight: 600 }}>
                      Current Progress: {currentLayerIndex} / {getLayerCount()} Layers
                    </Text>
                    <div
                      style={{
                        width: "100%",
                        height: "8px",
                        backgroundColor: "#E0E0E0",
                        borderRadius: "4px",
                        overflow: "hidden",
                      }}
                    >
                      <div
                        style={{
                          width: `${(currentLayerIndex / Math.max(1, getLayerCount())) * 100}%`,
                          height: "100%",
                          backgroundColor: "#FF5733",
                          transition: "width 0.3s ease-in-out",
                        }}
                      />
                    </div>
                  </Box>
                  
                  <Card style={{ padding: "16px", background: "#F9F9F9", border: "1px solid #F0F0F0", borderRadius: "8px" }}>
                    <Flex align="center" justify="between">
                      <Flex align="center" gap="3">
                        <Badge variant="soft" style={{ background: "#FFF4F2", color: "#FF5733" }}>
                          Total Layers: {getLayerCount()}
                        </Badge>
                      </Flex>
                      <Flex align="center" gap="3">
                        <Badge variant="soft" style={{ background: "#FFF4F2", color: "#FF5733" }}>
                          Completed Layers: {currentLayerIndex}
                        </Badge>
                        <StatusSummary results={predictResults} />
                      </Flex>
                    </Flex>
                  </Card>
                </Flex>
                
                <InferenceResultTable
                  predictResults={predictResults}
                  currentLayerIndex={currentLayerIndex}
                  isProcessing={isProcessing}
                  layerCount={getLayerCount()}
                />
              </Card>
            </Box>
          </motion.div>
        )}
      </Flex>

      <style>
        {`
        @keyframes spin {
          from {
            transform: rotate(0deg);
          }
          to {
            transform: rotate(360deg);
          }
        }
        `}
      </style>
    </Card>
  );
}

// Status summary component
interface StatusSummaryProps {
  results: any[];
}

function StatusSummary({ results }: StatusSummaryProps) {
  if (!results.length) return null;
  
  const successCount = results.filter(r => r.status === 'success').length;
  const errorCount = results.filter(r => r.status === 'error').length;
  
  return (
    <Flex gap="2">
      {successCount > 0 && (
        <Tooltip content={`${successCount} successful layers`}>
          <Badge color="green">
            <CheckIcon /> {successCount}
          </Badge>
        </Tooltip>
      )}
      {errorCount > 0 && (
        <Tooltip content={`${errorCount} layers with errors`}>
          <Badge color="red">
            <CrossCircledIcon /> {errorCount}
          </Badge>
        </Tooltip>
      )}
    </Flex>
  );
}

// Inference results table component
interface InferenceResultTableProps {
  predictResults: any[];
  currentLayerIndex: number;
  isProcessing: boolean;
  layerCount: number;
}

function InferenceResultTable({ 
  predictResults, 
  currentLayerIndex, 
  isProcessing, 
  layerCount 
}: InferenceResultTableProps) {
  return (
    <Table.Root>
      <Table.Header>
        <Table.Row style={{ background: "#FFF4F2" }}>
          <Table.ColumnHeaderCell style={{ color: "#FF5733", fontWeight: 600 }}>Layer</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell style={{ color: "#FF5733", fontWeight: 600 }}>Activation Function</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell style={{ color: "#FF5733", fontWeight: 600 }}>Input Vector</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell style={{ color: "#FF5733", fontWeight: 600 }}>Output Vector</Table.ColumnHeaderCell>
          <Table.ColumnHeaderCell style={{ color: "#FF5733", fontWeight: 600 }}>Status</Table.ColumnHeaderCell>
        </Table.Row>
      </Table.Header>
      <Table.Body>
        {predictResults.map((result, index) => (
          <Table.Row key={index} style={{ 
            background: index % 2 === 0 ? "#FFF" : "#FAFAFA",
            borderLeft: result.status === 'error' ? '2px solid #FFCDD2' : 'none'
          }}>
            <Table.Cell>
              <Badge color={result.status === 'error' ? "red" : "orange"} mr="1">
                {result.layerIdx + 1}
              </Badge>
            </Table.Cell>
            <Table.Cell>
              {result.status === 'error' ? (
                <Text size="2" style={{ color: "#B71C1C" }}>-</Text>
              ) : (
                getActivationTypeName(result.activationType)
              )}
            </Table.Cell>
            <Table.Cell>
              <Box style={{ maxWidth: "200px", overflow: "hidden" }}>
                <Flex direction="column" gap="1">
                  <Text size="1" style={{ color: "var(--gray-9)" }}>
                    Size: {result.inputMagnitude.length}
                  </Text>
                  <Code
                    style={{
                      maxHeight: "60px",
                      overflow: "auto",
                      fontSize: "11px",
                      padding: "4px",
                      backgroundColor: "var(--gray-a2)",
                    }}
                  >
                    [{formatVector(result.inputMagnitude, result.inputSign)}]
                  </Code>
                </Flex>
              </Box>
            </Table.Cell>
            <Table.Cell>
              {result.status === 'error' ? (
                <Flex align="center" gap="2">
                  <CrossCircledIcon style={{ color: "#F44336" }} />
                  <Text size="2" style={{ color: "#B71C1C" }}>
                    Failed
                  </Text>
                </Flex>
              ) : (
                <Box style={{ maxWidth: "200px", overflow: "hidden" }}>
                  <Flex direction="column" gap="1">
                    <Text size="1" style={{ color: "var(--gray-9)" }}>
                      Size: {result.outputMagnitude.length}
                    </Text>
                    <Code
                      style={{
                        maxHeight: "60px",
                        overflow: "auto",
                        fontSize: "11px",
                        padding: "4px",
                        backgroundColor: "var(--gray-a2)",
                      }}
                    >
                      [{formatVector(result.outputMagnitude, result.outputSign)}]
                    </Code>
                  </Flex>
                </Box>
              )}
            </Table.Cell>
            <Table.Cell>
              {result.status === 'error' ? (
                <Flex direction="column" gap="2">
                  <Badge color="red" variant="soft">
                    <CrossCircledIcon /> Error
                  </Badge>
                  <Tooltip content={result.errorMessage}>
                    <Text size="1" style={{ color: "#B71C1C", cursor: "help" }}>
                      {result.errorMessage?.substring(0, 30)}
                      {result.errorMessage?.length > 30 ? '...' : ''}
                    </Text>
                  </Tooltip>
                  {result.txDigest && (
                    <Button
                      size="1"
                      variant="soft"
                      style={{ 
                        background: "#FFEBEE", 
                        color: "#D32F2F",
                        cursor: "pointer",
                        transition: "all 0.2s ease-in-out",
                        border: "1px solid #FFCDD2",
                      }}
                      onClick={() => result.txDigest && window.open(getSuiScanUrl('transaction', result.txDigest), '_blank')}
                    >
                      <Flex align="center" gap="2">
                        <Text size="1">View Transaction</Text>
                        <ExternalLinkIcon />
                      </Flex>
                    </Button>
                  )}
                </Flex>
              ) : result.argmaxIdx !== undefined ? (
                <Flex direction="column" gap="2">
                  <Badge color="green" style={{ background: "#E8F5E9", color: "#2E7D32" }}>
                    <CheckIcon /> Final Prediction
                  </Badge>
                  <Text size="2" style={{ fontWeight: 600, color: "#2E7D32" }}>
                    Value: {formatVector([result.outputMagnitude[result.argmaxIdx]], [result.outputSign[result.argmaxIdx]])}
                  </Text>
                  {result.txDigest && (
                    <Button
                      size="1"
                      variant="soft"
                      style={{ 
                        background: "#FFF4F2", 
                        color: "#FF5733",
                        cursor: "pointer",
                        transition: "all 0.2s ease-in-out",
                        border: "1px solid #FFE8E2",
                      }}
                      className="hover-effect"
                      onClick={() => result.txDigest && window.open(getSuiScanUrl('transaction', result.txDigest), '_blank')}
                    >
                      <Flex align="center" gap="2">
                        <Text size="1">View Transaction</Text>
                        <ExternalLinkIcon />
                      </Flex>
                    </Button>
                  )}
                </Flex>
              ) : (
                <Flex direction="column" gap="2">
                  <Badge color="green" style={{ background: "#E8F5E9", color: "#2E7D32" }}>
                    <CheckIcon /> Completed
                  </Badge>
                  {result.txDigest && (
                    <Button
                      size="1"
                      variant="soft"
                      style={{ 
                        background: "#FFF4F2", 
                        color: "#FF5733",
                        cursor: "pointer",
                        transition: "all 0.2s ease-in-out",
                        border: "1px solid #FFE8E2",
                      }}
                      className="hover-effect"
                      onClick={() => result.txDigest && window.open(getSuiScanUrl('transaction', result.txDigest), '_blank')}
                    >
                      <Flex align="center" gap="2">
                        <Text size="1">View Transaction</Text>
                        <ExternalLinkIcon />
                      </Flex>
                    </Button>
                  )}
                </Flex>
              )}
            </Table.Cell>
          </Table.Row>
        ))}
        
        {/* Current processing layer row */}
        {isProcessing && (
          <Table.Row style={{ background: "#FFF4F2", opacity: 0.8 }}>
            <Table.Cell>
              <Badge color="orange" mr="1">{currentLayerIndex + 1}</Badge>
            </Table.Cell>
            <Table.Cell>Processing...</Table.Cell>
            <Table.Cell>
              <Flex align="center" gap="2">
                <ReloadIcon style={{ animation: "spin 1s linear infinite" }} />
                <Text size="2">Processing...</Text>
              </Flex>
            </Table.Cell>
            <Table.Cell>
              <Flex align="center" gap="2">
                <ReloadIcon style={{ animation: "spin 1s linear infinite" }} />
                <Text size="2">Pending...</Text>
              </Flex>
            </Table.Cell>
            <Table.Cell>
              <Badge style={{ background: "#E3F2FD", color: "#1565C0" }}>
                <ReloadIcon style={{ animation: "spin 1s linear infinite" }} /> Processing
              </Badge>
            </Table.Cell>
          </Table.Row>
        )}
        
        {/* Remaining layers rows */}
        {Array.from({ length: Math.max(0, layerCount - currentLayerIndex - (isProcessing ? 1 : 0)) }).map((_, idx) => (
          <Table.Row key={`pending-${idx}`} style={{ opacity: 0.5 }}>
            <Table.Cell>
              <Badge variant="outline" mr="1">{currentLayerIndex + idx + (isProcessing ? 1 : 0) + 1}</Badge>
            </Table.Cell>
            <Table.Cell>Pending</Table.Cell>
            <Table.Cell>-</Table.Cell>
            <Table.Cell>-</Table.Cell>
            <Table.Cell>
              <Badge variant="outline" color="gray">Pending</Badge>
            </Table.Cell>
          </Table.Row>
        ))}
      </Table.Body>
    </Table.Root>
  );
} 