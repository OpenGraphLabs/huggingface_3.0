import { useState } from "react";
import { useParams } from "react-router-dom";
import {
  Box,
  Flex,
  Heading,
  Text,
  Card,
  Tabs,
  Button,
  TextArea,
  Code,
  Avatar,
  Table,
  Badge,
} from "@radix-ui/themes";
import {
  HeartIcon,
  DownloadIcon,
  Share1Icon,
  GitHubLogoIcon,
  InfoCircledIcon,
  Cross2Icon,
} from "@radix-ui/react-icons";
import { useModelById } from "../hooks/useModels";

export function ModelDetail() {
  const { id } = useParams<{ id: string }>();
  const { model, loading, error } = useModelById(id || "");
  const [activeTab, setActiveTab] = useState("overview");
  const [promptText, setPromptText] = useState("");
  const [inferenceResult, setInferenceResult] = useState("");
  const [isInferenceLoading, setIsInferenceLoading] = useState(false);

  // 데이터 로딩 중이면 로딩 상태 표시
  if (loading) {
    return (
      <Flex direction="column" align="center" gap="3" py="8">
        <Text>모델 데이터를 불러오는 중입니다...</Text>
      </Flex>
    );
  }

  // 오류가 발생했거나 모델이 없는 경우
  if (error || !model) {
    return (
      <Flex direction="column" align="center" gap="3" py="8">
        <Text>{error || "모델을 찾을 수 없습니다."}</Text>
      </Flex>
    );
  }

  // Run inference function
  const runInference = async () => {
    if (!promptText.trim()) return;

    setIsInferenceLoading(true);

    // In a real implementation, this would communicate with the Sui blockchain for on-chain inference
    // This is just a simulation
    setTimeout(() => {
      let result = "";

      if (model.task_type === "text-generation") {
        result = `${promptText}\n\nThis is a text response generated by the ${model.name} model. In a real implementation, inference would be executed on the Sui blockchain.`;
      } else if (model.task_type === "translation") {
        result = `Translation result: This is text translated by the ${model.name} model.`;
      } else {
        result = `Inference result from ${model.name} model. Task: ${model.task_type}`;
      }

      setInferenceResult(result);
      setIsInferenceLoading(false);
    }, 1500);
  };

  return (
    <Box>
      {/* Model Header */}
      <Flex direction="column" gap="4" mb="6">
        <Flex justify="between" align="start">
          <Box>
            <Heading size="8" style={{ fontWeight: 700 }}>
              {model.name}
            </Heading>
            <Flex align="center" gap="2" mt="1">
              <Avatar size="2" fallback={model.creator[0]} style={{ background: "#FF5733" }} />
              <Text size="2">{model.creator}</Text>
            </Flex>
          </Box>

          <Flex gap="2">
            <Button variant="soft" style={{ borderRadius: "8px" }}>
              <HeartIcon style={{ color: "#F06292" }} />
              <Text>{model.likes}</Text>
            </Button>
            <Button variant="soft" style={{ borderRadius: "8px" }}>
              <DownloadIcon style={{ color: "#4CAF50" }} />
              <Text>{model.downloads}</Text>
            </Button>
            <Button variant="soft" style={{ borderRadius: "8px" }}>
              <Share1Icon style={{ color: "#2196F3" }} />
            </Button>
          </Flex>
        </Flex>

        <Text style={{ fontSize: "16px", lineHeight: "1.6" }}>{model.description}</Text>

        <Flex gap="3">
          <Card style={{ borderRadius: "8px", background: "#F5F5F5", border: "none" }}>
            <Flex align="center" gap="2">
              <InfoCircledIcon style={{ color: "#FF5733" }} />
              <Text size="2" style={{ fontWeight: 500 }}>
                Task: {getTaskName(model.task_type)}
              </Text>
            </Flex>
          </Card>
          <Card style={{ borderRadius: "8px", background: "#F5F5F5", border: "none" }}>
            <Flex align="center" gap="2">
              <GitHubLogoIcon style={{ color: "#333333" }} />
              <Text size="2" style={{ fontWeight: 500 }}>
                License: MIT
              </Text>
            </Flex>
          </Card>
        </Flex>
      </Flex>

      {/* Tab Navigation */}
      <Tabs.Root
        value={activeTab}
        onValueChange={setActiveTab}
        style={{
          borderRadius: "12px",
          overflow: "hidden",
          boxShadow: "0 4px 6px rgba(0, 0, 0, 0.05)",
        }}
      >
        <Tabs.List
          style={{
            background: "var(--gray-2)",
            padding: "8px",
            borderBottom: "1px solid var(--gray-4)",
          }}
        >
          <Tabs.Trigger value="overview" style={{ fontWeight: 600 }}>
            Overview
          </Tabs.Trigger>
          <Tabs.Trigger value="inference" style={{ fontWeight: 600 }}>
            Inference
          </Tabs.Trigger>
          <Tabs.Trigger value="files" style={{ fontWeight: 600 }}>
            Files
          </Tabs.Trigger>
          <Tabs.Trigger value="model-data" style={{ fontWeight: 600 }}>
            Model Data
          </Tabs.Trigger>
        </Tabs.List>

        <Box py="4" px="3" style={{ background: "white" }}>
          {/* Overview Tab */}
          <Tabs.Content value="overview">
            <Card style={{ border: "none", boxShadow: "none" }}>
              <Flex direction="column" gap="4">
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>
                  Model Information
                </Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  {model.name} is a {getTaskName(model.task_type)} model developed by{" "}
                  {model.creator}. This model is stored on the Sui blockchain and can run inference
                  in a fully on-chain environment.
                </Text>

                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>
                  Usage
                </Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  You can try this model directly in the Inference tab. You can also access it
                  programmatically through Sui smart contracts.
                </Text>

                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>
                  Model Architecture
                </Heading>
                <Text style={{ lineHeight: "1.6" }}>{getModelArchitecture(model.task_type)}</Text>

                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>
                  On-chain Information
                </Heading>
                <Flex
                  direction="column"
                  gap="2"
                  style={{ background: "#F5F5F5", padding: "16px", borderRadius: "8px" }}
                >
                  <Text size="2" style={{ fontFamily: "monospace" }}>
                    Object ID: {model.id}
                  </Text>
                  <Text size="2">Created: {new Date(model.createdAt).toLocaleDateString()}</Text>
                  <Text size="2">Size: {Math.floor(Math.random() * 500) + 100}MB</Text>
                </Flex>
              </Flex>
            </Card>
          </Tabs.Content>

          {/* Inference Tab */}
          <Tabs.Content value="inference">
            <Card style={{ border: "none", boxShadow: "none" }}>
              <Flex direction="column" gap="4">
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>
                  On-chain Inference
                </Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  Provide input below to run inference for the {model.name} model directly on the
                  Sui blockchain.
                </Text>

                <Box>
                  <Text size="2" mb="2" style={{ fontWeight: 500 }}>
                    Input:
                  </Text>
                  <TextArea
                    placeholder={getPlaceholderByTask(model.task_type)}
                    value={promptText}
                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                      setPromptText(e.target.value)
                    }
                    style={{
                      minHeight: "120px",
                      borderRadius: "8px",
                      border: "1px solid var(--gray-5)",
                      padding: "12px",
                      fontSize: "14px",
                    }}
                  />
                </Box>

                <Flex justify="end">
                  <Button
                    onClick={runInference}
                    disabled={isInferenceLoading || !promptText.trim()}
                    style={{
                      background: "#FF5733",
                      color: "white",
                      borderRadius: "8px",
                      opacity: isInferenceLoading || !promptText.trim() ? 0.6 : 1,
                    }}
                  >
                    {isInferenceLoading ? "처리 중..." : "추론 실행"}
                  </Button>
                </Flex>

                {inferenceResult && (
                  <Box>
                    <Text size="2" mb="2" style={{ fontWeight: 500 }}>
                      Result:
                    </Text>
                    <Code
                      size="2"
                      style={{
                        display: "block",
                        padding: "16px",
                        whiteSpace: "pre-wrap",
                        borderRadius: "8px",
                        background: "#F5F5F5",
                        border: "1px solid var(--gray-5)",
                        fontSize: "14px",
                        lineHeight: "1.6",
                      }}
                    >
                      {inferenceResult}
                    </Code>
                  </Box>
                )}
              </Flex>
            </Card>
          </Tabs.Content>

          {/* Files Tab */}
          <Tabs.Content value="files">
            <Card style={{ border: "none", boxShadow: "none" }}>
              <Flex direction="column" gap="4">
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>
                  Model Files
                </Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  This model is stored on the Sui blockchain and consists of the following files.
                </Text>

                <Box style={{ background: "#F5F5F5", padding: "16px", borderRadius: "8px" }}>
                  {getModelFiles(model.task_type).map((file, index) => (
                    <Flex
                      key={index}
                      justify="between"
                      py="2"
                      style={{
                        borderBottom:
                          index < getModelFiles(model.task_type).length - 1
                            ? "1px solid var(--gray-a2)"
                            : "none",
                        padding: "12px 8px",
                      }}
                    >
                      <Text size="2" style={{ fontFamily: "monospace" }}>
                        {file.name}
                      </Text>
                      <Text size="2" color="gray">
                        {file.size}
                      </Text>
                    </Flex>
                  ))}
                </Box>
              </Flex>
            </Card>
          </Tabs.Content>

          {/* Model Data Tab - 디코딩된 BCS 데이터 표시 */}
          <Tabs.Content value="model-data">
            <Card style={{ border: "none", boxShadow: "none" }}>
              <Flex direction="column" gap="4">
                <Heading size="4" style={{ color: "#FF5733", fontWeight: 700 }}>
                  Model Data
                </Heading>
                <Text style={{ lineHeight: "1.6" }}>
                  이 섹션에서는 Sui 블록체인에서 가져온 모델 데이터를 표시합니다.
                </Text>

                {model.graphs && model.graphs.length > 0 ? (
                  <>
                    <Heading size="3" style={{ color: "#FF5733", marginTop: "16px" }}>
                      모델 기본 정보
                    </Heading>
                    <Box
                      style={{
                        background: "#F5F5F5",
                        padding: "16px",
                        borderRadius: "8px",
                        overflowX: "auto",
                      }}
                    >
                      <Table.Root>
                        <Table.Body>
                          <Table.Row>
                            <Table.Cell style={{ fontWeight: 600 }}>이름</Table.Cell>
                            <Table.Cell>{model.name}</Table.Cell>
                          </Table.Row>
                          <Table.Row>
                            <Table.Cell style={{ fontWeight: 600 }}>설명</Table.Cell>
                            <Table.Cell>{model.description}</Table.Cell>
                          </Table.Row>
                          <Table.Row>
                            <Table.Cell style={{ fontWeight: 600 }}>작업 유형</Table.Cell>
                            <Table.Cell>{model.task_type}</Table.Cell>
                          </Table.Row>
                          <Table.Row>
                            <Table.Cell style={{ fontWeight: 600 }}>스케일</Table.Cell>
                            <Table.Cell>{model.scale.toString()}</Table.Cell>
                          </Table.Row>
                          <Table.Row>
                            <Table.Cell style={{ fontWeight: 600 }}>그래프 수</Table.Cell>
                            <Table.Cell>{model.graphs.length}</Table.Cell>
                          </Table.Row>
                        </Table.Body>
                      </Table.Root>
                    </Box>

                    {model.graphs.length > 0 && (
                      <>
                        <Heading size="3" style={{ color: "#FF5733", marginTop: "16px" }}>
                          그래프 및 레이어 정보
                        </Heading>
                        {model.graphs.map((graph, graphIdx) => (
                          <Box
                            key={graphIdx}
                            style={{
                              background: "#F5F5F5",
                              padding: "16px",
                              borderRadius: "8px",
                              overflowX: "auto",
                              marginBottom: "10px",
                            }}
                          >
                            <Heading size="2" style={{ marginBottom: "10px" }}>
                              그래프 {graphIdx + 1}
                            </Heading>
                            <Table.Root>
                              <Table.Header>
                                <Table.Row>
                                  <Table.ColumnHeaderCell>레이어</Table.ColumnHeaderCell>
                                  <Table.ColumnHeaderCell>유형</Table.ColumnHeaderCell>
                                  <Table.ColumnHeaderCell>입력 차원</Table.ColumnHeaderCell>
                                  <Table.ColumnHeaderCell>출력 차원</Table.ColumnHeaderCell>
                                </Table.Row>
                              </Table.Header>
                              <Table.Body>
                                {graph.layers.map((layer, layerIdx) => (
                                  <Table.Row key={layerIdx}>
                                    <Table.Cell>{layerIdx + 1}</Table.Cell>
                                    <Table.Cell>
                                      {getLayerTypeName(String(layer.layer_type))}
                                    </Table.Cell>
                                    <Table.Cell>{layer.in_dimension.toString()}</Table.Cell>
                                    <Table.Cell>{layer.out_dimension.toString()}</Table.Cell>
                                  </Table.Row>
                                ))}
                              </Table.Body>
                            </Table.Root>
                          </Box>
                        ))}
                      </>
                    )}

                    {model.graphs.length > 0 && (
                      <>
                        <Heading size="3" style={{ color: "#FF5733", marginTop: "16px" }}>
                          텐서 정보
                        </Heading>
                        <Box
                          style={{
                            background: "#F5F5F5",
                            padding: "16px",
                            borderRadius: "8px",
                            overflowX: "auto",
                          }}
                        >
                          <Table.Root>
                            <Table.Header>
                              <Table.Row>
                                <Table.ColumnHeaderCell>그래프</Table.ColumnHeaderCell>
                                <Table.ColumnHeaderCell>레이어</Table.ColumnHeaderCell>
                                <Table.ColumnHeaderCell>가중치 텐서 형태</Table.ColumnHeaderCell>
                                <Table.ColumnHeaderCell>편향 텐서 형태</Table.ColumnHeaderCell>
                              </Table.Row>
                            </Table.Header>
                            <Table.Body>
                              {model.graphs.flatMap((graph, graphIdx) =>
                                graph.layers.map((layer, layerIdx) => (
                                  <Table.Row key={`${graphIdx}-${layerIdx}`}>
                                    <Table.Cell>{graphIdx + 1}</Table.Cell>
                                    <Table.Cell>{layerIdx + 1}</Table.Cell>
                                    <Table.Cell>
                                      {Array.isArray(layer.weight_tensor.shape)
                                        ? layer.weight_tensor.shape
                                            .map((d: any) => d.toString())
                                            .join(" × ")
                                        : "없음"}
                                    </Table.Cell>
                                    <Table.Cell>
                                      {Array.isArray(layer.bias_tensor.shape)
                                        ? layer.bias_tensor.shape
                                            .map((d: any) => d.toString())
                                            .join(" × ")
                                        : "없음"}
                                    </Table.Cell>
                                  </Table.Row>
                                ))
                              )}
                            </Table.Body>
                          </Table.Root>
                        </Box>
                      </>
                    )}

                    {model.partial_denses.length > 0 && (
                      <>
                        <Heading size="3" style={{ color: "#FF5733", marginTop: "16px" }}>
                          부분 밀집 레이어
                        </Heading>
                        <Box
                          style={{
                            background: "#F5F5F5",
                            padding: "16px",
                            borderRadius: "8px",
                            overflowX: "auto",
                          }}
                        >
                          <Table.Root>
                            <Table.Header>
                              <Table.Row>
                                <Table.ColumnHeaderCell>ID</Table.ColumnHeaderCell>
                                <Table.ColumnHeaderCell>부분 수</Table.ColumnHeaderCell>
                              </Table.Row>
                            </Table.Header>
                            <Table.Body>
                              {model.partial_denses.map((pd, pdIdx) => (
                                <Table.Row key={pdIdx}>
                                  <Table.Cell>{pdIdx + 1}</Table.Cell>
                                  <Table.Cell>{pd.partials.length}</Table.Cell>
                                </Table.Row>
                              ))}
                            </Table.Body>
                          </Table.Root>
                        </Box>
                      </>
                    )}
                  </>
                ) : (
                  <Flex
                    direction="column"
                    align="center"
                    gap="3"
                    py="4"
                    style={{ background: "#FFF4F2", borderRadius: "8px", padding: "20px" }}
                  >
                    <Cross2Icon width={32} height={32} style={{ color: "#FF5733" }} />
                    <Text style={{ textAlign: "center" }}>모델 데이터를 찾을 수 없습니다.</Text>
                    <Badge color="orange">데이터 없음</Badge>
                  </Flex>
                )}
              </Flex>
            </Card>
          </Tabs.Content>
        </Box>
      </Tabs.Root>
    </Box>
  );
}

// Task name conversion function
function getTaskName(taskId: string): string {
  const taskMap: Record<string, string> = {
    "text-generation": "Text Generation",
    "image-classification": "Image Classification",
    "object-detection": "Object Detection",
    "text-to-image": "Text-to-Image",
    translation: "Translation",
  };
  return taskMap[taskId] || taskId;
}

// Task-specific input placeholders
function getPlaceholderByTask(task: string): string {
  switch (task) {
    case "text-generation":
      return "Enter a text prompt...";
    case "image-classification":
      return "Enter an image URL...";
    case "object-detection":
      return "Enter an image URL...";
    case "text-to-image":
      return "Enter a text prompt for image generation...";
    case "translation":
      return "Enter text to translate...";
    default:
      return "Enter input...";
  }
}

// Model architecture information
function getModelArchitecture(task: string): string {
  switch (task) {
    case "text-generation":
      return "This model is based on the Transformer architecture, using a decoder-only design for autoregressive language modeling.";
    case "image-classification":
      return "This model uses a Convolutional Neural Network (CNN) architecture to classify images.";
    case "object-detection":
      return "This model uses a Single Shot Detector (SSD) architecture to detect and classify objects in images.";
    case "text-to-image":
      return "This model uses a diffusion model architecture to generate images from text prompts.";
    case "translation":
      return "This model uses an encoder-decoder Transformer architecture to translate text from one language to another.";
    default:
      return "This model uses state-of-the-art deep learning architecture.";
  }
}

// Model files list
function getModelFiles(task: string): Array<{ name: string; size: string }> {
  const commonFiles = [
    { name: "config.json", size: "4.2KB" },
    { name: "README.md", size: "8.5KB" },
    { name: "LICENSE", size: "1.1KB" },
  ];

  switch (task) {
    case "text-generation":
      return [
        { name: "model.bin", size: "548MB" },
        { name: "tokenizer.json", size: "1.2MB" },
        { name: "vocab.json", size: "798KB" },
        ...commonFiles,
      ];
    case "image-classification":
      return [
        { name: "model.bin", size: "102MB" },
        { name: "classes.txt", size: "12KB" },
        ...commonFiles,
      ];
    default:
      return [{ name: "model.bin", size: "256MB" }, ...commonFiles];
  }
}

// Layer type name conversion function
function getLayerTypeName(layerType: string): string {
  const layerTypeMap: Record<string, string> = {
    "0": "Convolutional Layer",
    "1": "Fully Connected Layer",
    "2": "Max Pooling Layer",
    "3": "Average Pooling Layer",
    "4": "Flatten Layer",
    "5": "ReLU Activation Layer",
    "6": "Softmax Activation Layer",
    "7": "Sigmoid Activation Layer",
    "8": "Tanh Activation Layer",
    "9": "Leaky ReLU Activation Layer",
    "10": "Batch Normalization Layer",
    "11": "Dropout Layer",
    "12": "Embedding Layer",
    "13": "LSTM Layer",
    "14": "GRU Layer",
    "15": "RNN Layer",
    "16": "Bidirectional Layer",
    "17": "Transposed Convolutional Layer",
    "18": "Up Sampling Layer",
    "19": "Down Sampling Layer",
    "20": "Cropping Layer",
    "21": "Resizing Layer",
    "22": "Concatenation Layer",
    "23": "Addition Layer",
  };
  return layerTypeMap[layerType] || `Unknown Layer (${layerType})`;
}
